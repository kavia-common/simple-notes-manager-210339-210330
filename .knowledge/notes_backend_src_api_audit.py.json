{"is_source_file": true, "format": "Python", "description": "This file defines a function for recording audit log entries related to CRUD operations on notes, including capturing user context, actions, entity details, and states before and after changes.", "external_files": ["sqlmodel", "./models", "./security"], "external_methods": ["session.add", "logger.info"], "published": ["write_audit_entry"], "classes": [{"name": "AuditLog", "description": "Data model representing an audit log entry, imported from models module."}, {"name": "UserContext", "description": "User security context, providing user identification info, imported from security module."}], "methods": [{"name": "AuditLog write_audit_entry( session: Session, *, user: Optional[UserContext], action: str, entity: str, entity_id: Optional[int] = None, before_state: Optional[Dict[str, Any]] = None, after_state: Optional[Dict[str, Any]] = None, reason: Optional[str] = None, error: Optional[str] = None, )", "description": "Creates and logs an audit log entry for note CRUD operations, capturing relevant details and persisting to the database.", "scope": "", "scopeKind": ""}], "calls": ["session.add", "logger.info"], "search-terms": ["audit", "audit_log", "write_audit_entry", "crud operations", "user context", "session", "logging"], "state": 2, "file_id": 9, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/simple-notes-manager-210339-210330/notes_backend/src/api/audit.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "write_audit_entry", "path": "/home/kavia/workspace/code-generation/simple-notes-manager-210339-210330/notes_backend/src/api/audit.py", "pattern": "/^def write_audit_entry($/", "language": "Python", "typeref": "typename:AuditLog", "kind": "function", "signature": "( session: Session, *, user: Optional[UserContext], action: str, entity: str, entity_id: Optional[int] = None, before_state: Optional[Dict[str, Any]] = None, after_state: Optional[Dict[str, Any]] = None, reason: Optional[str] = None, error: Optional[str] = None, )"}], "hash": "6109a97ac4da7298c248cd98a285485f", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/audit.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}